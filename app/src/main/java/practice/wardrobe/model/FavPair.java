package practice.wardrobe.model;

import java.util.List;

import practice.wardrobe.DatabaseManager;
import practice.wardrobe.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "FAV_PAIR".
 */
public class FavPair {

    private Long id;
    private Long upperId;
    private Long lowerId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FavPairDao myDao;

    private ClothItem upper;
    private Long upper__resolvedKey;

    private ClothItem lower;
    private Long lower__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public FavPair() {
    }

    public FavPair(Long id) {
        this.id = id;
    }

    public FavPair(Long id, Long upperId, Long lowerId) {
        this.id = id;
        this.upperId = upperId;
        this.lowerId = lowerId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFavPairDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getUpperId() {
        return upperId;
    }

    public void setUpperId(Long upperId) {
        this.upperId = upperId;
    }

    public Long getLowerId() {
        return lowerId;
    }

    public void setLowerId(Long lowerId) {
        this.lowerId = lowerId;
    }

    /** To-one relationship, resolved on first access. */
    public ClothItem getUpper() {
        Long __key = this.upperId;
        if (upper__resolvedKey == null || !upper__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ClothItemDao targetDao = daoSession.getClothItemDao();
            ClothItem upperNew = targetDao.load(__key);
            synchronized (this) {
                upper = upperNew;
            	upper__resolvedKey = __key;
            }
        }
        return upper;
    }

    public void setUpper(ClothItem upper) {
        synchronized (this) {
            this.upper = upper;
            upperId = upper == null ? null : upper.getId();
            upper__resolvedKey = upperId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ClothItem getLower() {
        Long __key = this.lowerId;
        if (lower__resolvedKey == null || !lower__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ClothItemDao targetDao = daoSession.getClothItemDao();
            ClothItem lowerNew = targetDao.load(__key);
            synchronized (this) {
                lower = lowerNew;
            	lower__resolvedKey = __key;
            }
        }
        return lower;
    }

    public void setLower(ClothItem lower) {
        synchronized (this) {
            this.lower = lower;
            lowerId = lower == null ? null : lower.getId();
            lower__resolvedKey = lowerId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    public static FavPair getUniquePair(Long lowerId, Long upperId) {
        FavPairDao dao = DatabaseManager.getDaoSessionMain().getFavPairDao();
        return dao.queryBuilder().where(FavPairDao.Properties.LowerId.eq(lowerId), FavPairDao.Properties.UpperId.eq(upperId)).unique();
    }
    // KEEP METHODS END

}
